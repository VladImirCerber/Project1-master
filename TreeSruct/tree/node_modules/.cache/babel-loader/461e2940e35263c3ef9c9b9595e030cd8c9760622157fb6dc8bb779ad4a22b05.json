{"ast":null,"code":"var _jsxFileName = \"C:\\\\OSPanel\\\\domains\\\\Project1-master\\\\TreeSruct\\\\tree\\\\src\\\\FileStructure\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport { get, post } from '../request';\nimport Checkbox from '../Checkbox';\nimport { getIcon, transformRawJSONToAddUniqueIds, renameNodeInTreeByUniqueId, moveNode, sortTree } from './helpers';\nimport { Wrapper, Inner, TreeWrapper, Node, NodeRow, CheckboxWrapper, Arrow, ArrowFiller, ArrowFillerRealtime, NodeName, NoData, IconWrapper } from './styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileStructure = ({\n  showAlert\n}) => {\n  _s();\n  const [tree, setTree] = useState([]);\n  const [expandedNodes, setExpandedNodes] = useState([]);\n  const handleExpandCollapse = e => {\n    !expandedNodes.includes(+e.currentTarget.dataset.uniqueId) ? setExpandedNodes([...expandedNodes, +e.currentTarget.dataset.uniqueId]) : setExpandedNodes(expandedNodes.filter(x => x !== +e.currentTarget.dataset.uniqueId));\n  };\n  useEffect(() => {\n    get('/tree').then(res => {\n      if (!res) return;\n      const {\n        results: tree\n      } = res;\n      setTree(transformRawJSONToAddUniqueIds(tree));\n    });\n  }, []);\n  const [renamingNowUniqueId, setRenamingNowUniqueId] = useState();\n  const [renamingNowValue, setRenamingNowValue] = useState('');\n  const treeWrapperRef = useRef(null);\n  const handleStartRenameNode = e => {\n    setRenamingNowUniqueId(+e.currentTarget.dataset.uniqueId);\n    setRenamingNowValue(e.currentTarget.dataset.value);\n    if (treeWrapperRef.current) {\n      const input = treeWrapperRef.current.querySelector(`input[data-unique-id=\"${e.currentTarget.dataset.uniqueId}\"]`);\n      if (input) setTimeout(() => input.focus(), 100);\n    }\n  };\n  const handleChangeNodeName = e => setRenamingNowValue(e.target.value);\n  const catchControlKeysWhenEditNodeName = e => {\n    if (e.key === 'Enter') {\n      let newTree;\n      newTree = renameNodeInTreeByUniqueId(tree, +e.currentTarget.dataset.uniqueId, renamingNowValue);\n      newTree = sortTree(newTree);\n      setTree(newTree);\n      post('/tree/update', {\n        newTree: JSON.stringify(newTree)\n      });\n      showAlert('Переименован элемент с uniqueId === ' + e.currentTarget.dataset.uniqueId);\n    }\n    if (e.key === 'Enter' || e.key === 'Escape') undoRenaming();\n  };\n  const undoRenaming = () => {\n    setRenamingNowUniqueId(undefined);\n    setRenamingNowValue('');\n  };\n  const [nowDraggingUniqueId, setNowDraggingUniqueId] = useState();\n  const [nowDragOverUniqueId, setNowDragOverUniqueId] = useState();\n  const [nowDragOverType, setNowDragOverType] = useState();\n  const handleDragStartNodeRow = e => {\n    setNowDraggingUniqueId(+e.currentTarget.dataset.uniqueId);\n    setNowDragOverUniqueId(+e.currentTarget.dataset.uniqueId);\n  };\n  const handleDragEnterNodeRow = e => {\n    if (nowDraggingUniqueId !== +e.currentTarget.dataset.uniqueId) {\n      setNowDragOverUniqueId(+e.currentTarget.dataset.uniqueId);\n      setNowDragOverType(e.currentTarget.dataset.type);\n    } else {\n      setNowDragOverUniqueId(nowDraggingUniqueId);\n    }\n  };\n  const handleDragEndNodeRow = () => {\n    if (nowDraggingUniqueId !== nowDragOverUniqueId && nowDragOverType === 'folder') {\n      let newTree;\n      newTree = moveNode(tree, nowDraggingUniqueId, nowDragOverUniqueId);\n      newTree = sortTree(newTree);\n      setTree(newTree);\n      post('/tree/update', {\n        newTree: JSON.stringify(newTree)\n      });\n    }\n    setNowDraggingUniqueId(undefined);\n    setNowDragOverUniqueId(undefined);\n    setNowDragOverType(undefined);\n  };\n  const buildTree = (tree, isRealtime) => {\n    const mappedNodes = tree.map(node => {\n      const isExpanded = expandedNodes.includes(node.uniqueId);\n      const isFolderOrCamera = node.type === 'folder' || node.type === 'camera';\n      const isEvent = node.type === 'events_group';\n      const isInputDisabled = renamingNowUniqueId !== node.uniqueId;\n      return /*#__PURE__*/_jsxDEV(Node, {\n        isExpanded: isExpanded,\n        hasVerticalLine: isFolderOrCamera,\n        children: [/*#__PURE__*/_jsxDEV(NodeRow, {\n          \"data-unique-id\": node.uniqueId,\n          \"data-type\": node.type,\n          draggable: isFolderOrCamera,\n          isReadyToDrop: nowDragOverUniqueId === node.uniqueId && node.type === 'folder' && nowDragOverUniqueId !== node.parentUniqueId,\n          onDragStart: handleDragStartNodeRow,\n          onDragEnter: handleDragEnterNodeRow,\n          onDragEnd: handleDragEndNodeRow,\n          children: [isFolderOrCamera ? /*#__PURE__*/_jsxDEV(Arrow, {\n            onClick: handleExpandCollapse,\n            \"data-unique-id\": node.uniqueId,\n            children: /*#__PURE__*/_jsxDEV(IconWrapper, {\n              children: getIcon(isExpanded ? 'arrow_opened' : 'arrow_closed')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this) : isEvent ? /*#__PURE__*/_jsxDEV(CheckboxWrapper, {\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(ArrowFiller, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(IconWrapper, {\n            children: [!isExpanded && node.type === 'folder' && getIcon('folder'), isExpanded && node.type === 'folder' && getIcon('folder_opened'), !isExpanded && node.type === 'camera' && getIcon('camera'), isExpanded && node.type === 'camera' && getIcon('camera_enabled'), node.type !== 'folder' && node.type !== 'camera' && getIcon(node.type)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NodeName, {\n            onDoubleClick: handleStartRenameNode,\n            \"data-unique-id\": node.uniqueId,\n            \"data-value\": node.name,\n            disabled: isInputDisabled,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              \"data-unique-id\": node.uniqueId,\n              value: renamingNowUniqueId === node.uniqueId ? renamingNowValue : node.name,\n              onChange: handleChangeNodeName,\n              onKeyDown: catchControlKeysWhenEditNodeName,\n              onBlur: undoRenaming,\n              disabled: isInputDisabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), node.contains ? buildTree(node.contains, !!node.realtime) : null]\n      }, node.uniqueId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this);\n    });\n    if (isRealtime) {\n      mappedNodes.unshift( /*#__PURE__*/_jsxDEV(Node, {\n        children: /*#__PURE__*/_jsxDEV(NodeRow, {\n          hasHorizontalLine: true,\n          children: [/*#__PURE__*/_jsxDEV(ArrowFiller, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconWrapper, {\n            children: getIcon('realtime')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ArrowFillerRealtime, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u041F\\u0440\\u044F\\u043C\\u043E\\u0439 \\u044D\\u0444\\u0438\\u0440\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, Math.random(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this));\n    }\n    return mappedNodes;\n  };\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Inner, {\n      children: /*#__PURE__*/_jsxDEV(TreeWrapper, {\n        ref: treeWrapperRef,\n        children: tree.length ? buildTree(tree) : /*#__PURE__*/_jsxDEV(NoData, {\n          children: \"\\u041D\\u0435\\u0442 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(FileStructure, \"x4G++RMBv9ue+KOyrKk15WzOBJE=\");\n_c = FileStructure;\nexport default FileStructure;\nvar _c;\n$RefreshReg$(_c, \"FileStructure\");","map":{"version":3,"names":["useEffect","useState","useRef","get","post","Checkbox","getIcon","transformRawJSONToAddUniqueIds","renameNodeInTreeByUniqueId","moveNode","sortTree","Wrapper","Inner","TreeWrapper","Node","NodeRow","CheckboxWrapper","Arrow","ArrowFiller","ArrowFillerRealtime","NodeName","NoData","IconWrapper","jsxDEV","_jsxDEV","FileStructure","showAlert","_s","tree","setTree","expandedNodes","setExpandedNodes","handleExpandCollapse","e","includes","currentTarget","dataset","uniqueId","filter","x","then","res","results","renamingNowUniqueId","setRenamingNowUniqueId","renamingNowValue","setRenamingNowValue","treeWrapperRef","handleStartRenameNode","value","current","input","querySelector","setTimeout","focus","handleChangeNodeName","target","catchControlKeysWhenEditNodeName","key","newTree","JSON","stringify","undoRenaming","undefined","nowDraggingUniqueId","setNowDraggingUniqueId","nowDragOverUniqueId","setNowDragOverUniqueId","nowDragOverType","setNowDragOverType","handleDragStartNodeRow","handleDragEnterNodeRow","type","handleDragEndNodeRow","buildTree","isRealtime","mappedNodes","map","node","isExpanded","isFolderOrCamera","isEvent","isInputDisabled","hasVerticalLine","children","draggable","isReadyToDrop","parentUniqueId","onDragStart","onDragEnter","onDragEnd","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onDoubleClick","name","disabled","onChange","onKeyDown","onBlur","contains","realtime","unshift","hasHorizontalLine","Math","random","ref","length","_c","$RefreshReg$"],"sources":["C:/OSPanel/domains/Project1-master/TreeSruct/tree/src/FileStructure/index.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react'\r\n\r\nimport { get, post } from '../request'\r\nimport Checkbox from '../Checkbox'\r\nimport {\r\n  getIcon,\r\n  transformRawJSONToAddUniqueIds,\r\n  renameNodeInTreeByUniqueId,\r\n  moveNode,\r\n  sortTree,\r\n} from './helpers'\r\nimport {\r\n  Wrapper, Inner, TreeWrapper, Node, NodeRow, CheckboxWrapper,\r\n  Arrow, ArrowFiller, ArrowFillerRealtime, NodeName, NoData, IconWrapper,\r\n} from './styled'\r\n\r\n\r\nconst FileStructure = ({ showAlert }) => {\r\n  const [ tree, setTree ] = useState([])\r\n  const [ expandedNodes, setExpandedNodes ] = useState([])\r\n\r\n  const handleExpandCollapse = (e) => {\r\n    !expandedNodes.includes(+e.currentTarget.dataset.uniqueId)\r\n      ? setExpandedNodes([ ...expandedNodes, +e.currentTarget.dataset.uniqueId ])\r\n      : setExpandedNodes(expandedNodes.filter((x) => x !== +e.currentTarget.dataset.uniqueId))\r\n  }\r\n\r\n  useEffect(() => {\r\n    get('/tree').then((res) => {\r\n      if (!res) return\r\n      const { results: tree } = res\r\n      setTree(transformRawJSONToAddUniqueIds(tree))\r\n    })\r\n  }, [])\r\n\r\n  const [ renamingNowUniqueId, setRenamingNowUniqueId ] = useState()\r\n  const [ renamingNowValue, setRenamingNowValue ] = useState('')\r\n  const treeWrapperRef = useRef(null)\r\n\r\n  const handleStartRenameNode = (e) => {\r\n    setRenamingNowUniqueId(+e.currentTarget.dataset.uniqueId)\r\n    setRenamingNowValue(e.currentTarget.dataset.value)\r\n\r\n    if (treeWrapperRef.current) {\r\n      const input = treeWrapperRef.current.querySelector(`input[data-unique-id=\"${e.currentTarget.dataset.uniqueId}\"]`)\r\n      if (input) setTimeout(() => input.focus(), 100)\r\n    }\r\n  }\r\n\r\n  const handleChangeNodeName = (e) => setRenamingNowValue(e.target.value)\r\n\r\n  const catchControlKeysWhenEditNodeName = (e) => {\r\n    if (e.key === 'Enter') {\r\n      let newTree\r\n      newTree = renameNodeInTreeByUniqueId(tree, +e.currentTarget.dataset.uniqueId, renamingNowValue)\r\n      newTree = sortTree(newTree)\r\n\r\n      setTree(newTree)\r\n      post('/tree/update', { newTree: JSON.stringify(newTree) })\r\n      showAlert('Переименован элемент с uniqueId === ' + e.currentTarget.dataset.uniqueId)\r\n    }\r\n\r\n    if (e.key === 'Enter' || e.key === 'Escape') undoRenaming()\r\n  }\r\n\r\n  const undoRenaming = () => {\r\n    setRenamingNowUniqueId(undefined)\r\n    setRenamingNowValue('')\r\n  }\r\n\r\n  const [ nowDraggingUniqueId, setNowDraggingUniqueId ] = useState()\r\n  const [ nowDragOverUniqueId, setNowDragOverUniqueId ] = useState()\r\n  const [ nowDragOverType, setNowDragOverType ] = useState()\r\n\r\n  const handleDragStartNodeRow = (e) => {\r\n    setNowDraggingUniqueId(+e.currentTarget.dataset.uniqueId)\r\n    setNowDragOverUniqueId(+e.currentTarget.dataset.uniqueId)\r\n  }\r\n\r\n  const handleDragEnterNodeRow = (e) => {\r\n    if (nowDraggingUniqueId !== +e.currentTarget.dataset.uniqueId) {\r\n      setNowDragOverUniqueId(+e.currentTarget.dataset.uniqueId)\r\n      setNowDragOverType(e.currentTarget.dataset.type)\r\n    } else {\r\n      setNowDragOverUniqueId(nowDraggingUniqueId)\r\n    }\r\n  }\r\n\r\n  const handleDragEndNodeRow = () => {\r\n    if (nowDraggingUniqueId !== nowDragOverUniqueId && nowDragOverType === 'folder') {\r\n      let newTree\r\n      newTree = moveNode(tree, nowDraggingUniqueId, nowDragOverUniqueId)\r\n      newTree = sortTree(newTree)\r\n      setTree(newTree)\r\n      post('/tree/update', { newTree: JSON.stringify(newTree) })\r\n    }\r\n\r\n    setNowDraggingUniqueId(undefined)\r\n    setNowDragOverUniqueId(undefined)\r\n    setNowDragOverType(undefined)\r\n  }\r\n\r\n  const buildTree = (tree, isRealtime) => {\r\n    const mappedNodes = tree.map((node) => {\r\n      const isExpanded = expandedNodes.includes(node.uniqueId)\r\n      const isFolderOrCamera = node.type === 'folder' || node.type === 'camera'\r\n      const isEvent = node.type === 'events_group'\r\n      const isInputDisabled = renamingNowUniqueId !== node.uniqueId\r\n\r\n\r\n      return (\r\n        <Node\r\n          key={node.uniqueId}\r\n          isExpanded={isExpanded}\r\n          hasVerticalLine={isFolderOrCamera}\r\n        >\r\n          <NodeRow\r\n            data-unique-id={node.uniqueId}\r\n            data-type={node.type}\r\n            draggable={isFolderOrCamera}\r\n            isReadyToDrop={nowDragOverUniqueId === node.uniqueId && node.type === 'folder' && nowDragOverUniqueId !== node.parentUniqueId}\r\n            onDragStart={handleDragStartNodeRow}\r\n            onDragEnter={handleDragEnterNodeRow}\r\n            onDragEnd={handleDragEndNodeRow}\r\n          >\r\n            {isFolderOrCamera ? (\r\n              <Arrow\r\n                onClick={handleExpandCollapse}\r\n                data-unique-id={node.uniqueId}\r\n              >\r\n                <IconWrapper>\r\n                  {getIcon(isExpanded ? 'arrow_opened' : 'arrow_closed')}\r\n                </IconWrapper>\r\n              </Arrow>\r\n            ) : isEvent ? (\r\n              <CheckboxWrapper>\r\n                <Checkbox />\r\n              </CheckboxWrapper>\r\n            ) : <ArrowFiller />}\r\n\r\n            <IconWrapper>\r\n              {!isExpanded && node.type === 'folder' && getIcon('folder')}\r\n              {isExpanded && node.type === 'folder' && getIcon('folder_opened')}\r\n\r\n              {!isExpanded && node.type === 'camera' && getIcon('camera')}\r\n              {isExpanded && node.type === 'camera' && getIcon('camera_enabled')}\r\n\r\n              {node.type !== 'folder' && node.type !== 'camera' && getIcon(node.type)}\r\n            </IconWrapper>\r\n\r\n            <NodeName\r\n              onDoubleClick={handleStartRenameNode}\r\n              data-unique-id={node.uniqueId}\r\n              data-value={node.name}\r\n              disabled={isInputDisabled}\r\n            >\r\n              <input\r\n                data-unique-id={node.uniqueId}\r\n                value={(renamingNowUniqueId === node.uniqueId ? renamingNowValue : node.name)}\r\n                onChange={handleChangeNodeName}\r\n                onKeyDown={catchControlKeysWhenEditNodeName}\r\n                onBlur={undoRenaming}\r\n                disabled={isInputDisabled}\r\n              />\r\n            </NodeName>\r\n          </NodeRow>\r\n\r\n          {node.contains ? buildTree(node.contains, !!node.realtime) : null}\r\n        </Node>\r\n      )\r\n    })\r\n\r\n    if (isRealtime) {\r\n      mappedNodes.unshift(\r\n        <Node key={Math.random()}>\r\n          <NodeRow hasHorizontalLine>\r\n            <ArrowFiller />\r\n            <IconWrapper>{getIcon('realtime')}</IconWrapper>\r\n            <ArrowFillerRealtime />\r\n            <span>Прямой эфир</span>\r\n          </NodeRow>\r\n        </Node>\r\n      )\r\n    }\r\n\r\n    return mappedNodes\r\n  }\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Inner>\r\n        <TreeWrapper ref={treeWrapperRef}>\r\n          {tree.length\r\n            ? buildTree(tree)\r\n            : <NoData>Нет данных</NoData>\r\n          }\r\n        </TreeWrapper>\r\n      </Inner>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FileStructure"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}