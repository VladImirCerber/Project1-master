{"ast":null,"code":"// Main request method\nconst request = async (method, url, body) => {\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  //\n  // Body will be interpret as URL Params and attach to URL, or as FormData\n  //\n\n  let convertedParams = '';\n\n  // Send as FormData, ...\n  if (body && method !== 'GET') {\n    if (body.isFile) {\n      options.body = body.file;\n    } else {\n      options.body = JSON.stringify(body);\n    }\n\n    // ... or as URL Params\n  } else if (body) {\n    if (body.params) {\n      const {\n        params\n      } = body;\n      for (const key in clearEmptyParams(params)) {\n        if (params !== '') convertedParams += '&';\n        convertedParams += key + '=' + encodeURI(params[key]);\n      }\n      convertedParams = convertedParams.slice(1);\n      if (convertedParams) convertedParams = '?' + convertedParams;\n    }\n  }\n\n  // Optional Signal to cancel previous request\n  if (body !== null && body !== void 0 && body.signal) options.signal = body.signal;\n  return fetch(process.env.REACT_APP_API_URL + url, options).then(res => res.json()).catch(err => console.error(err));\n};\n\n// Remove empty params from URL to avoid things like param1=&param2=123\nconst clearEmptyParams = params => {\n  const cleared = {};\n  Object.keys(params).forEach(key => {\n    if (params[key] && key !== 'signal') {\n      cleared[key] = params[key];\n    }\n  });\n  return cleared;\n};\n\n// GET\nexport const get = (url, params) => request('GET', url, {\n  params: params,\n  signal: params === null || params === void 0 ? void 0 : params.signal\n});\n\n// POST\nexport const post = (url, body) => request('POST', url, body);\n\n// PUT\nexport const put = (url, body) => request('PUT', url, body);\nexport default request;","map":{"version":3,"names":["request","method","url","body","options","headers","convertedParams","isFile","file","JSON","stringify","params","key","clearEmptyParams","encodeURI","slice","signal","fetch","process","env","REACT_APP_API_URL","then","res","json","catch","err","console","error","cleared","Object","keys","forEach","get","post","put"],"sources":["C:/OSPanel/domains/Project1-master/TreeSruct/tree/src/request.js"],"sourcesContent":["// Main request method\r\nconst request = async (\r\n    method,\r\n    url,\r\n    body,\r\n  ) => {\r\n  \r\n    const options = {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    }\r\n  \r\n    //\r\n    // Body will be interpret as URL Params and attach to URL, or as FormData\r\n    //\r\n  \r\n    let convertedParams = ''\r\n  \r\n    // Send as FormData, ...\r\n    if (body && method !== 'GET') {\r\n      if (body.isFile) {\r\n        options.body = body.file\r\n      } else {\r\n        options.body = JSON.stringify(body)\r\n      }\r\n  \r\n    // ... or as URL Params\r\n    } else if (body) {\r\n      if (body.params) {\r\n        const { params } = body\r\n  \r\n        for (const key in clearEmptyParams(params)) {\r\n          if (params !== '') convertedParams += '&'\r\n          convertedParams += key + '=' + encodeURI(params[key])\r\n        }\r\n  \r\n        convertedParams = convertedParams.slice(1)\r\n        if (convertedParams) convertedParams = '?' + convertedParams\r\n      }\r\n    }\r\n  \r\n    // Optional Signal to cancel previous request\r\n    if (body?.signal) options.signal = body.signal\r\n  \r\n    return fetch(process.env.REACT_APP_API_URL + url, options)\r\n      .then((res) => res.json())\r\n      .catch((err) => console.error(err))\r\n  }\r\n  \r\n  \r\n  // Remove empty params from URL to avoid things like param1=&param2=123\r\n  const clearEmptyParams = (params) => {\r\n    const cleared = {}\r\n  \r\n    Object.keys(params).forEach((key) => {\r\n      if (params[key] && key !== 'signal') {\r\n        cleared[key] = params[key]\r\n      }\r\n    })\r\n  \r\n    return cleared\r\n  }\r\n  \r\n  \r\n  // GET\r\n  export const get = (url, params) =>\r\n    request('GET', url, {\r\n      params: params,\r\n      signal: params?.signal,\r\n    })\r\n  \r\n  // POST\r\n  export const post = (url, body) =>\r\n    request('POST', url, body)\r\n  \r\n  // PUT\r\n  export const put = (url, body) =>\r\n    request('PUT', url, body)\r\n  \r\n  \r\n  export default request"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,MAAAA,CACZC,MAAM,EACNC,GAAG,EACHC,IAAI,KACD;EAEH,MAAMC,OAAO,GAAG;IACdH,MAAM;IACNI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;;EAED;EACA;EACA;;EAEA,IAAIC,eAAe,GAAG,EAAE;;EAExB;EACA,IAAIH,IAAI,IAAIF,MAAM,KAAK,KAAK,EAAE;IAC5B,IAAIE,IAAI,CAACI,MAAM,EAAE;MACfH,OAAO,CAACD,IAAI,GAAGA,IAAI,CAACK,IAAI;IAC1B,CAAC,MAAM;MACLJ,OAAO,CAACD,IAAI,GAAGM,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;IACrC;;IAEF;EACA,CAAC,MAAM,IAAIA,IAAI,EAAE;IACf,IAAIA,IAAI,CAACQ,MAAM,EAAE;MACf,MAAM;QAAEA;MAAO,CAAC,GAAGR,IAAI;MAEvB,KAAK,MAAMS,GAAG,IAAIC,gBAAgB,CAACF,MAAM,CAAC,EAAE;QAC1C,IAAIA,MAAM,KAAK,EAAE,EAAEL,eAAe,IAAI,GAAG;QACzCA,eAAe,IAAIM,GAAG,GAAG,GAAG,GAAGE,SAAS,CAACH,MAAM,CAACC,GAAG,CAAC,CAAC;MACvD;MAEAN,eAAe,GAAGA,eAAe,CAACS,KAAK,CAAC,CAAC,CAAC;MAC1C,IAAIT,eAAe,EAAEA,eAAe,GAAG,GAAG,GAAGA,eAAe;IAC9D;EACF;;EAEA;EACA,IAAIH,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEa,MAAM,EAAEZ,OAAO,CAACY,MAAM,GAAGb,IAAI,CAACa,MAAM;EAE9C,OAAOC,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,iBAAiB,GAAGlB,GAAG,EAAEE,OAAO,CAAC,CACvDiB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;AACvC,CAAC;;AAGD;AACA,MAAMZ,gBAAgB,GAAIF,MAAM,IAAK;EACnC,MAAMiB,OAAO,GAAG,CAAC,CAAC;EAElBC,MAAM,CAACC,IAAI,CAACnB,MAAM,CAAC,CAACoB,OAAO,CAAEnB,GAAG,IAAK;IACnC,IAAID,MAAM,CAACC,GAAG,CAAC,IAAIA,GAAG,KAAK,QAAQ,EAAE;MACnCgB,OAAO,CAAChB,GAAG,CAAC,GAAGD,MAAM,CAACC,GAAG,CAAC;IAC5B;EACF,CAAC,CAAC;EAEF,OAAOgB,OAAO;AAChB,CAAC;;AAGD;AACA,OAAO,MAAMI,GAAG,GAAGA,CAAC9B,GAAG,EAAES,MAAM,KAC7BX,OAAO,CAAC,KAAK,EAAEE,GAAG,EAAE;EAClBS,MAAM,EAAEA,MAAM;EACdK,MAAM,EAAEL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK;AAClB,CAAC,CAAC;;AAEJ;AACA,OAAO,MAAMiB,IAAI,GAAGA,CAAC/B,GAAG,EAAEC,IAAI,KAC5BH,OAAO,CAAC,MAAM,EAAEE,GAAG,EAAEC,IAAI,CAAC;;AAE5B;AACA,OAAO,MAAM+B,GAAG,GAAGA,CAAChC,GAAG,EAAEC,IAAI,KAC3BH,OAAO,CAAC,KAAK,EAAEE,GAAG,EAAEC,IAAI,CAAC;AAG3B,eAAeH,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}